buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.bmuschko:gradle-nexus-plugin:2.3.1'
    }
}

plugins {
    id "org.flywaydb.flyway" version "4.2.0"
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'com.bmuschko.nexus'
apply from: 'libraries.gradle'

group = 'com.robo4j'
archivesBaseName = 'robo4j'
description = 'Robo4J is the message passing framework for Robotics/IoT'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    mavenLocal()
    jcenter()
}

//uploadArchives {
//    repositories {
//        mavenDeployer {
//            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
//
//            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
//                authentication(userName: ossrhUsername, password: ossrhPassword)
//            }
//            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
//                authentication(userName: ossrhUsername, password: ossrhPassword)
//            }
//
//            pom.project {
//                name project.name
//                description project.description
//                packaging 'jar'
//                url 'https://github.com/Robo4J/robo4j'
//                scm {
//                    connection 'scm:git:https://github.com/Robo4J/robo4j.git'
//                    developerConnection 'scm:https://github.com/Robo4J/robo4j.git'
//                    url 'https://github.com/Robo4J/robo4j.git'
//                }
//                licenses {
//                    license {
//                        name 'GNU General Public License'
//                        url 'https://www.gnu.org/licenses/gpl-3.0.en.html'
//                        distribution 'repo'
//                    }
//                }
//                developers {
//                    developer {
//                        id = 'Wengner'
//                        name = 'Miroslav Wengner'
//                        email = 'miro@robo4j.io'
//                    }
//                    developer {
//                        id = 'hirt'
//                        name = 'Marcus Hirt'
//                        email = 'marcus@robo4j.io'
//                    }
//                }
//            }
//        }
//    }
//}

modifyPom {
    project {
        name 'Robo4J framework'
        description "${description}"
        url 'https://github.com/Robo4J/robo4j'
        inceptionYear '2014'

        scm {
            url 'https://github.com/Robo4J/robo4j'
            connection 'scm:https://github.com/Robo4J/robo4j.git'
            developerConnection 'scm:https://github.com/Robo4J/robo4j.git'
        }

        licenses {
            license {
                name 'GNU General Public License'
                url 'https://www.gnu.org/licenses/gpl-3.0.en.html'
                distribution 'repo'
            }
        }

        developers {
            developer {
                id 'Wengner'
                name 'Miroslav Wengner'
                email 'miro@robo4j.io'
            }
            developer {
                id 'Hirt'
                name 'Marcus Hirt'
                email 'marcus@robo4j.io'
            }
        }
    }
}

extraArchive {
    sources = false
    tests = true
    javadoc = false
}

//nexus {
//    sign = true
//    repositoryUrl = 'https://github.com/Robo4J/robo4j/'
//    snapshotRepositoryUrl = 'https://github.com/Robo4J/robo4j/'
//}

project("robo4j-core") {
    description = "Robo4J Core"

    group 'com.robo4j'
    version "${robo4jVersion}"

    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    apply plugin: 'maven'

    sourceCompatibility = 1.8

    repositories {
        mavenCentral()
        mavenLocal()
    }

    dependencies {
        testCompile "junit:junit:${junitVersion}@jar"
        testCompile "org.hamcrest:hamcrest-all:${hamcrestAllVersion}@jar"
    }

    sourceSets {
        main {
            java {
                srcDirs = ['src/main/java']
            }
            resources {
                srcDirs = ['src/main/resources']
            }
        }

        test {
            java {
                srcDirs = ['src/test/java']
            }
            resources {
                srcDirs = ['src/test/resources']
            }
        }
    }
}

project("robo4j-db-sql") {

    description = "Robo4J Database SQL"

    group 'com.robo4j'
    version "${robo4jVersion}"

    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    apply plugin: 'maven'
    apply plugin: "org.flywaydb.flyway"

    sourceCompatibility = 1.8

    repositories {
        mavenCentral()
        mavenLocal()
    }

    dependencies {
        compile(project(":robo4j-core"))
        compile "org.flywaydb:flyway-core:${flywayVersion}"
        compile "org.hibernate.javax.persistence:hibernate-jpa-2.1-api:${hibernateJpaVersion}"
        compile "org.postgresql:postgresql:${postgresqlVersion}"
        compile "org.hibernate:hibernate-core:${hibernateVersion}"
        compile "com.h2database:h2:${h2Version}"
        testCompile project(':robo4j-core').sourceSets.test.output
        testCompile "junit:junit:${junitVersion}@jar"
        testCompile "org.hamcrest:hamcrest-all:${hamcrestAllVersion}@jar"
    }

    //main db
    flyway {
        url = 'jdbc:h2:~/data/robo4j1h2'
        user = 'sa'
    }

    sourceSets {
        main {
            java {
                srcDirs = ['src/main/java']
            }
            resources {
                srcDirs = ['src/main/resources']
            }
        }

        test {
            java {
                srcDirs = ['src/test/java']
            }
            resources {
                srcDirs = ['src/test/resources']
            }
        }
    }
}

project("robo4j-hw-lego") {
    description = "Robo4J Lego Hardware"

    group 'com.robo4j'
    version "${robo4jVersion}"

    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    apply plugin: 'maven'

    sourceCompatibility = 1.8

    repositories {
        mavenCentral()
        mavenLocal()
    }

//    uploadArchives {
//        repositories {
//            mavenDeployer {
//                repository(url: "${mavenRepository}")
//            }
//        }
//    }

    sourceSets {
        main {
            java {
                srcDirs = ['src/main/java', 'src/examples/java', 'libs']
            }
            resources {
                srcDirs = ['src/main/resources', 'src/examples/resources']
            }
        }

        test {
            java {
                srcDirs = ['src/test/java']
            }
            resources {
                srcDirs = ['src/test/resources']
            }
        }
    }

    //sources
    dependencies {
        compile fileTree(dir: 'libs', include: 'ev3classes-9.1.jar')
        compile(project(":robo4j-math"))
        testCompile "junit:junit:${junitVersion}"
        testCompile "org.hamcrest:hamcrest-all:${hamcrestAllVersion}"
    }
}

project("robo4j-hw-rpi") {
    description = "Robo4J RaspberryPi Hardware"

    group 'com.robo4j'
    version "${robo4jVersion}"

    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    apply plugin: 'maven'

    sourceCompatibility = 1.8

    repositories {
        mavenCentral()
        mavenLocal()
    }

//    uploadArchives {
//        repositories {
//            mavenDeployer {
//                repository(url: "${mavenRepository}")
//            }
//        }
//    }

    //create a single Jar with all dependencies
    task fatJar(type: Jar) {
        manifest {
            attributes 'Implementation-Title': 'robo4j-hw-rpi',
                    'Implementation-Version': version,
                    'Main-Class': 'com.robo4j.hw.rpi.i2c.adafruitled.GraphBarTest'
        }
        //baseName = project.name + '-all'
        baseName = 'robo4j-hw-rpi'
        from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
        with jar
    }

    dependencies {
        compile fileTree(dir: 'libs', include: 'pi4j-core-1.2-20170907.193313-36.jar')
        compile(project(":robo4j-math"))
        testCompile "junit:junit:${junitVersion}"
        testCompile "org.hamcrest:hamcrest-all:${hamcrestAllVersion}"
    }

    sourceSets {
        main {
            java {
                srcDirs = ['src/main/java', 'src/examples/java']
            }
            resources {
                srcDirs = ['src/main/resources', 'src/examples/resources']
            }
        }

        test {
            java {
                srcDirs = ['src/test/java']
            }
            resources {
                srcDirs = ['src/test/resources']
            }
        }
    }
}

project("robo4j-math") {
    description = "Robo4J Math"

    group 'com.robo4j'
    version "${robo4jVersion}"

    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    apply plugin: 'maven'

    sourceCompatibility = 1.8

    repositories {
        mavenCentral()
        mavenLocal()
    }

    dependencies {
        testCompile "junit:junit:${junitVersion}"
        testCompile "org.hamcrest:hamcrest-all:${hamcrestAllVersion}"
    }

    sourceSets {
        main {
            java {
                srcDirs = ['src/main/java']
            }
            resources {
                srcDirs = ['src/main/resources']
            }
        }

        test {
            java {
                srcDirs = ['src/test/java']
            }
            resources {
                srcDirs = ['src/test/resources']
            }
        }
    }
}


project("robo4j-page") {
    description = "Robo4J Page"

    group 'com.robo4j'
    version "${robo4jVersion}"

    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    apply plugin: 'maven'

    sourceCompatibility = 1.8

    repositories {
        mavenCentral()
        mavenLocal()
    }

    dependencies {
        testCompile "junit:junit:${junitVersion}@jar"
        testCompile "org.hamcrest:hamcrest-all:${hamcrestAllVersion}@jar"
    }

    sourceSets {
        main {
            java {
                srcDirs = ['src/main/java']
            }
            resources {
                srcDirs = ['src/main/resources']
            }
        }

        test {
            java {
                srcDirs = ['src/test/java']
            }
            resources {
                srcDirs = ['src/test/resources']
            }
        }
    }
}

project("robo4j-socket-http") {

    description = "Robo4J socket http"

    group 'com.robo4j'
    version "${robo4jVersion}"

    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    apply plugin: 'maven'
    apply plugin: "org.flywaydb.flyway"

    sourceCompatibility = 1.8

    repositories {
        mavenCentral()
        mavenLocal()
    }

    dependencies {
        compile(project(":robo4j-core"))
        testCompile project(':robo4j-core').sourceSets.test.output
        testCompile "junit:junit:${junitVersion}@jar"
        testCompile "org.hamcrest:hamcrest-all:${hamcrestAllVersion}@jar"
        testCompile "org.mockito:mockito-all:${mockitoVerison}@jar"
    }

    sourceSets {
        main {
            java {
                srcDirs = ['src/main/java']
            }
            resources {
                srcDirs = ['src/main/resources']
            }
        }

        test {
            java {
                srcDirs = ['src/test/java']
            }
            resources {
                srcDirs = ['src/test/resources']
            }
        }
    }

}


project("robo4j-units-lego") {
    description = "Robo4J Lego Abstractions"

    group 'com.robo4j'
    version "${robo4jVersion}"

    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    apply plugin: 'maven'

    sourceCompatibility = 1.8

    repositories {
        mavenCentral()
        mavenLocal()
    }

//    uploadArchives {
//        repositories {
//            mavenDeployer {
//                repository(url: "${mavenRepository}")
//            }
//        }
//    }

    //create a single Jar with all dependencies
    task fatJar(type: Jar) {
        manifest {
            attributes 'Implementation-Title': 'robo4j-units-lego',
                    'Implementation-Version': version
        }
        baseName = 'robo4j-units-lego'
        from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
        with jar
    }

    dependencies {
        compile(project(":robo4j-hw-lego"))
        compile(project(":robo4j-socket-http"))
        compile(project(":robo4j-core"))
        testCompile "junit:junit:${junitVersion}"
        testCompile "org.hamcrest:hamcrest-all:${hamcrestAllVersion}"
    }
}

project("robo4j-units-rpi") {
    description = "Robo4J Raspberry Pi"

    group 'com.robo4j'
    version "${robo4jVersion}"

    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    apply plugin: 'maven'

    sourceCompatibility = 1.8

    repositories {
        mavenCentral()
        mavenLocal()
    }

//    uploadArchives {
//        repositories {
//            mavenDeployer {
//                repository(url: "${mavenRepository}")
//            }
//        }
//    }

    //create a single Jar with all dependencies
    task fatJar(type: Jar) {
        manifest {
            attributes 'Implementation-Title': 'robo4j-units-rpi',
                    'Implementation-Version': version,
                    'Main-Class': 'com.robo4j.units.rpi.gyro.GyroExample'
        }
        //baseName = project.name + '-all'
        baseName = 'robo4j-units-rpi'
        from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
        with jar
    }

    //sources
    sourceSets {
        main {
            java {
                srcDirs = ['src/main/java', 'src/examples/java']
            }
            resources {
                srcDirs = ['src/main/resources', 'src/examples/resources']
            }
        }

        test {
            java {
                srcDirs = ['src/test/java']
            }
            resources {
                srcDirs = ['src/test/resources']
            }
        }
    }

    dependencies {
        compile(project(":robo4j-hw-rpi"))
        compile(project(":robo4j-socket-http"))
        compile(project(":robo4j-core"))
        testCompile "junit:junit:${junitVersion}"
        testCompile "org.hamcrest:hamcrest-all:${hamcrestAllVersion}"
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = "${roboGradleVersion}"
}

/* global settings */
configure(allprojects) { project ->
    group = "com.robo4j"

    compileJava.options*.compilerArgs = [
            "-Xlint:unchecked", "-Xlint:rawtypes",
    ]

    compileTestJava.options*.compilerArgs = [
            "-Xlint:deprecation", "-Xlint:unchecked", "-Xlint:rawtypes",
    ]
}