group 'com.robo4j'

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply from: 'libraries.gradle'

allprojects {
    repositories {
        mavenCentral()
        mavenLocal()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    }

    sourceCompatibility = "${robo4jJavaVersion}"
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    apply plugin: 'maven'

    group 'com.robo4j'
    version "${robo4jVersion}"

    tasks.withType(Test){
        testLogging {
            events "started", "passed", "skipped", "failed"
        }
    }
}


project("robo4j-core") {
    description = "Robo4J Core"

    dependencies {
        testCompile "junit:junit:${junitVersion}"
    }

    test {
        systemProperty "java.net.preferIPv4Stack", "true"
    }

    sourceSets {
        main {
            java {
                srcDirs = ['src/main/java']
            }
            resources {
                srcDirs = ['src/main/resources']
            }
        }

        test {
            java {
                srcDirs = ['src/test/java']
            }
            resources {
                srcDirs = ['src/test/resources']
            }
        }
    }
}


project("robo4j-hw-lego") {
    description = "Robo4J Lego Hardware"

    dependencies {
        compile fileTree(dir: 'libs', include: 'ev3classes-9.1.jar')
        compile(project(":robo4j-math"))
        testCompile "junit:junit:${junitVersion}"
    }

    sourceSets {
        main {
            java {
                srcDirs = ['src/main/java', 'src/examples/java']
            }
            resources {
                srcDirs = ['src/main/resources', 'src/examples/resources']
            }
        }

        test {
            java {
                srcDirs = ['src/test/java']
            }
            resources {
                srcDirs = ['src/test/resources']
            }
        }
    }
}

project("robo4j-hw-rpi") {
    description = "Robo4J RaspberryPi Hardware"

    //create a single Jar with all dependencies
    task fatJar(type: Jar) {
        manifest {
            attributes 'Implementation-Title': baseName,
                    'Implementation-Version': version
        }
        //baseName = project.name + '-all'
        baseName = 'robo4j-hw-rpi'
        from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
        with jar
    }

    dependencies {
        compile "com.pi4j:pi4j-core:${pi4jVersion}"
        compile(project(":robo4j-math"))
        testCompile "junit:junit:${junitVersion}"
    }

    sourceSets {
        main {
            java {
                srcDirs = ['src/main/java', 'src/examples/java']
            }
            resources {
                srcDirs = ['src/main/resources', 'src/examples/resources']
            }
        }

        test {
            java {
                srcDirs = ['src/test/java']
            }
            resources {
                srcDirs = ['src/test/resources']
            }
        }
    }
}

project("robo4j-math") {
    description = "Robo4J Math"

    dependencies {
        testCompile "junit:junit:${junitVersion}"
    }

    sourceSets {
        main {
            java {
                srcDirs = ['src/main/java']
            }
            resources {
                srcDirs = ['src/main/resources']
            }
        }

        test {
            java {
                srcDirs = ['src/test/java']
            }
            resources {
                srcDirs = ['src/test/resources']
            }
        }
    }
}

project("robo4j-socket-http") {
    description = "Robo4J socket http"

    dependencies {
        compile(project(":robo4j-core"))
        testCompile "junit:junit:${junitVersion}"
    }

    sourceSets {
        main {
            java {
                srcDirs = ['src/main/java']
            }
            resources {
                srcDirs = ['src/main/resources']
            }
        }

        test {
            java {
                srcDirs = ['src/test/java']
            }
            resources {
                srcDirs = ['src/test/resources']
            }
        }
    }
}

project("robo4j-units-lego") {
    description = "Robo4J Lego Abstractions"

    //create a single Jar with all dependencies
    task fatJar(type: Jar) {
        manifest {
            attributes 'Implementation-Title': 'robo4j-units-lego',
                    'Implementation-Version': version
        }
        baseName = 'robo4j-units-lego'
        from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
        with jar
    }

    dependencies {
        compile(project(":robo4j-core"))
        compile(project(":robo4j-hw-lego"))
        testCompile(project(":robo4j-socket-http"))
        testCompile "junit:junit:${junitVersion}"
    }

    sourceSets {
        main {
            java {
                srcDirs = ['src/main/java', 'src/examples/java']
            }
            resources {
                srcDirs = ['src/main/resources', 'src/examples/resources']
            }
        }

        test {
            java {
                srcDirs = ['src/test/java']
            }
            resources {
                srcDirs = ['src/test/resources']
            }
        }
    }
}

project("robo4j-units-rpi") {
    description = "Robo4J Raspberry Pi Units"

    //create a single Jar with all dependencies
    task fatJar(type: Jar) {
        manifest {
            attributes 'Implementation-Title': 'robo4j-units-rpi',
                    'Implementation-Version': version
        }
        //baseName = project.name + '-all'
        baseName = 'robo4j-units-rpi'
        from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
        with jar
    }

    dependencies {
        compile(project(":robo4j-core"))
        compile(project(":robo4j-hw-rpi"))
        testCompile "junit:junit:${junitVersion}"
    }

    sourceSets {
        main {
            java {
                srcDirs = ['src/main/java', 'src/examples/java']
            }
            resources {
                srcDirs = ['src/main/resources', 'src/examples/resources']
            }
        }

        test {
            java {
                srcDirs = ['src/test/java']
            }
            resources {
                srcDirs = ['src/test/resources']
            }
        }
    }
}

project("robo4j-units-rpi-http") {
    description = "Robo4J Codecs for rpi units"

    dependencies {
    	compile(project(":robo4j-socket-http"))
        compile(project(":robo4j-units-rpi"))
        testCompile "junit:junit:${junitVersion}"
    }

    sourceSets {
        main {
            java {
                srcDirs = ['src/main/java']
            }
        }

        test {
            java {
                srcDirs = ['src/test/java']
            }
            resources {
                srcDirs = ['src/test/resources']
            }
        }
    }
}

wrapper {
    gradleVersion = "${roboGradleVersion}"
}

/* global settings */
configure(allprojects) { project ->
    group = "com.robo4j"

    compileJava.options*.compilerArgs = [
            "-Xlint:unchecked", "-Xlint:rawtypes",
    ]

    compileTestJava.options*.compilerArgs = [
            "-Xlint:deprecation", "-Xlint:unchecked", "-Xlint:rawtypes",
    ]
}

